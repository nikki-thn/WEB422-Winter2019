// From: https://angular.io/tutorial/toh-pt1 

//This example, Hero class is defined as hero.ts
export class Hero {
  id: number;
  name: string;
}

======= Create Angular component =========
CLI: ng generate component componentName

======= Display object ========

***TS file
import { Component, OnInit } from '@angular/core';
import { Hero } from '../hero';

@Component({
  selector: 'app-heroes',
  templateUrl: './heroes.component.html',
  styleUrls: ['./heroes.component.css']
})
export class HeroesComponent implements OnInit {
  hero: Hero = {
    id: 1,
    name: 'Windstorm'
  };

  constructor() { }

  ngOnInit() {
  }
}

***HTML file

<h2>{{hero.name | upppercase }} Details</h2> <!-- Piping to format strings, currency, dates and other display data -->
<div><span>id: </span>{{hero.id}}</div>
<div><span>name: </span>{{hero.name}}</div>

======= Edit object ========
Using HTML form, we apply Two-way binding to allow displaying and updating data from user

****HTML file - 
**Needs 3 imports for ngModel in app.module.ts file
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms'; // <-- NgModel lives here

<div>
  <label>name:
    <input [(ngModel)]="hero.name" placeholder="name">
    <!-- [(ngModel)] is Angular's two-way data binding syntax. Here it bind the input field with property name from hero obj-->
  </label>
</div>

====== Event Handler ======

<li *ngFor="let hero of heroes" (click)="onSelect(hero)"> //on click, call onSelect pass the current hero obj

selectedHero: Hero; //??? Array or a single obj
onSelect(hero: Hero): void {
  this.selectedHero = hero;
}

<div *ngIf="selectedHero"> <!-- only shows when selectedHero is not empty -->
      <input [(ngModel)]="selectedHero.name" placeholder="name">
</div>

===== Change CSS class =======

<li *ngFor="let hero of heroes"
  [class.selected]="hero === selectedHero" 
  <!-- add class "selected" to the element only when hero === selectedHero -->
  (click)="onSelect(hero)">
  <span class="badge">{{hero.id}}</span> {{hero.name}}
</li>

====== Binding external input property =======

Passing property from one component to another

*****Hero-detail.ts
import { Component, OnInit, Input } from '@angular/core';
import { Hero } from '../hero';
 
@Component({
  selector: 'app-hero-detail',
  templateUrl: './hero-detail.component.html',
  styleUrls: ['./hero-detail.component.css']
})
export class HeroDetailComponent implements OnInit {
  @Input() hero: Hero; //hero obj type Hero getting from Hero component
}

****Hero-details.html
<div *ngIf="hero"> <!-- if hero is not empty
  <h2>{{hero.name | uppercase}} Details</h2>
</div>

*****Hero.html
<h2>My Heroes</h2>

<ul class="heroes">
  <li *ngFor="let hero of heroes"
    [class.selected]="hero === selectedHero"
    (click)="onSelect(hero)">
    <span class="badge">{{hero.id}}</span> {{hero.name}}
  </li>
</ul>

<app-hero-detail [hero]="selectedHero"></app-hero-detail> <!-- pass or giving the selectedHero to Hero-details
