State vs property: state is similar to property but prefer to ones that can be changed and will be dynamically render (ie a list of name from an array)

When using state, we must supply a key for react to identify an element (use the key of the objects or index of the array)
        
EVENT BINDING AND HANDLING IN REACT
class ListNames extends Component {
    constructor(){ // list names does *not* accept props
        super();
        this.state = {
            names: ["Dean", "Adrien", "Sarah", "Chandra"] //RENDER COLLECTION
        }
        
         this.handleListItemAdd = this.handleListItemAdd.bind(this); //BIND EVENT HANDLER TO THE CLASS
    }

    handleListItemAdd(){
        this.setState(function(prevState){
            let newArray = prevState.names;
            newArray.push("New Item");
            return {names: newArray};
        });
    }
    
    render() {
        return (
            <div>
                <ul>
                    {this.state.names.map((name, index) => {
                        return (
                            <li key={index} >{name}</li>
                        );
                    })}
                </ul>
                <button type="button" className="btn btn-primary btn-sm" onClick={this.handleListItemAdd}>Add List Item</button>
            </div>
        );
    }
}
  
PASSING DATA FROM ONE COMPONENT TO ANOTHER
  
class Inner extends Component{
        render(){ // this.props.name IS updated to reflect the new name: "Bob"
        return <span>{this.props.name}</span>
}
}

class Outer extends Component {
  constructor() {
    super()
    this.state = {
      outerName: ""
    }
  }

  componentDidMount(){
    // set the "outerName" to change to "Bob" after 2 seconds
    setTimeout(()=>{
      this.setState({
        outerName: "Bob"
      });
    },2000);
  }

  render() {
    return <Inner name={this.state.outerName} />
  }
}

//Note that Outer using state because it changes every 2 second while inner uses props because it simply accept a static value through its defined property

ROUTING IN REACT (Redirect, Not Found, Link to)

--== index.js ==--
import { BrowserRouter } from 'react-router-dom'

ReactDOM.render(
    <BrowserRouter>
        <App />
    </BrowserRouter>
  , document.getElementById('root'));
  
--== App.js ==--
import React, { Component } from 'react';
import { Route, Switch, Redirect, Link } from 'react-router-dom'

class Home extends Component{
  render(){
    return <h1>Home Page</h1>
  }
}

class Projects extends Component{
  render(){
    return <h1>All Projects Page</h1>
  }
}

class Project extends Component{
  render(){
    return <h1>Project {this.props.id} Page</h1>
  }
}

class Link extends Component{
  render(){
    return <h1>Project {this.props.id} Page</h1>
  }
}

class NotFound extends Component {
  render() {
    return (
      <div>
        <h1 className="page-header">{this.props.title}</h1>
        Page Not Found
      </div>
    );
  }
}

class App extends Component {
  render() {
    return (
        <Switch>
                <Route exact path='/' render={() => (
                <Home />
                )}/>
                <Route exact path='/Projects' render={() => (
                <Projects  />
                )}/>
                <Route path='/Project/:id' render={(props) => (
                    <Project id={props.match.params.id} />
                )}/>
                <Route path='/testRedirect' render={() => (
                  <Redirect push to={"/"} />
                )} />
                <Route path='/NotFound' render={() => (
                  <NotFound title="404 Error"/>
                )} />
                <Route render={() => (
                  <Link to="/NotFound">My route </Link>
                )} />
        </Switch>
    );
  }
}


HANDLE HTML FORM AND FETCHING DATA WITH REACT

