====== JASMINE SYNTAX =====
1. Test suite: (or test group)
  describe("description", function { specs } ): a name or explaination of the test, can be one or more functions
  
2. spec (test)
  it("string", function { one or expectation } )
  expectation: using expect( "actual value" ) chained to Matcher functions
  
  Code Examples:
  
  describe('AppComponent', () => { 
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  }));
  it('should create the app', async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app).toBeTruthy(); //chaining expect() to a matcher function
  }));
  
  
  Matcher functions: take in the benchmark value to compare against the actual value
    toBe(): one variable equal another variable
    toEqual(): one variable equal to a value
    toMatch(): for reg expression
    toBeDefined() / toBeUndefined(): expect a variable to be defined or not defined
    toContain(): check for sustring , an alternative is toMatch()
    toBeLessThan() / toBeGreaterThan(): numeric comparisons
    toBeCloseTo(): approximate comparisons
    toThrow() / toThrowError(): to check if a function is throwing error as expected
    toBeTruthy() / toBeFalsy() // truthy vs falsy ( 0, false, ""): each data type will have a defined truthy or falsy values
 
 
 ===== KARMA TESTING =====

import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { By } from '@angular/platform-browser'; //for .query()
import { ComponentOneComponent } from './component-one.component';

describe('ComponentOneComponent', () => {
  let component: ComponentOneComponent; //component we want to test
  let fixture: ComponentFixture<ComponentOneComponent>; //fixture???

//Before component is create, do some setup
  beforeEach(async(() => {
    TestBed.configureTestingModule({ //### TestBed: an env, give a component to test
      declarations: [ ComponentOneComponent ] //## name a component to test
    })
    .compileComponents();
  }));

//Here, TestBed is ready, attach fixture to the testbed
  beforeEach(() => {
    fixture = TestBed.createComponent(ComponentOneComponent); //### connect the component to the tests, make fixture avail
    component = fixture.componentInstance; //### access the component
    fixture.detectChanges(); //access an element of a component ??
  });

  it('should create', () => {
    expect(component).toBeTruthy(); //### which result expected
  });
  
  it('must have at least 1 paragraph', () => {
  let pElements = fixture.debugElement.queryAll(By.css('p'));
  expect(pElements.length).toBeGreaterThan(0);
  });
  
  //TEST: 
  it('The "greeting" must read: "Hello"',()=>{
    let greetingElement = fixture.debugElement.query(By.css('p.greeting'));
      //expect(greetingElement.textContent).toEqual('Hello'); // does not work, because we need a "native element"
      expect(greetingElement.nativeElement.textContent).toEqual('Hello');
  });

  //TEST: manually invoke the click event (using .click()) and write our expectation 
  it('Sets x to 1 when "myButton" is clicked', () => {
  let button = fixture.debugElement.query(By.css('button.myButton'));
  button.nativeElement.click();

  //once the component fixture “becomes stable”
    fixture.whenStable().then(() => {
      expect(component.x).toBe(1); //check the property x from the component, hence component.x
    });
  });

});


